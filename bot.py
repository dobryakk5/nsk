import asyncio
import logging
import os
import asyncpg
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
FORM_URL = "https://nsp25.com/signup?sid=7628641"
DATABASE_URL = os.getenv('DATABASE_URL')
ADMIN_USER_IDS = [7852511755, 1342058150]
SPONSOR_NUMBER = 7628641

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

async def get_db_connection():
    return await asyncpg.connect(DATABASE_URL)

async def add_user_to_db(user: types.User):
    try:
        conn = await get_db_connection()
        await conn.execute('''
            INSERT INTO users (tg_user_id, username, first_name)
            VALUES ($1, $2, $3)
            ON CONFLICT (tg_user_id) DO NOTHING
        ''', user.id, user.username, user.first_name)
    except asyncpg.PostgresError as e:
        logging.error(f"Database error: {e}")
    finally:
        if conn:
            await conn.close()

async def update_user_reg(tg_user_id: int, reg_number: int):
    try:
        conn = await get_db_connection()
        await conn.execute('''
            UPDATE users SET reg = $1 WHERE tg_user_id = $2
        ''', reg_number, tg_user_id)
    except asyncpg.PostgresError as e:
        logging.error(f"Database error: {e}")
    finally:
        if conn:
            await conn.close()

async def get_user_data(tg_user_id: int):
    try:
        conn = await get_db_connection()
        user_data = await conn.fetchrow('''
            SELECT reg, first_name FROM users WHERE tg_user_id = $1
        ''', tg_user_id)
        return user_data
    except asyncpg.PostgresError as e:
        logging.error(f"Database error: {e}")
        return None
    finally:
        if conn:
            await conn.close()

async def get_all_users():
    try:
        conn = await get_db_connection()
        users = await conn.fetch('''
            SELECT username, reg FROM users 
            WHERE username IS NOT NULL 
            ORDER BY created_at DESC
        ''')
        return users
    except asyncpg.PostgresError as e:
        logging.error(f"Database error: {e}")
        return []
    finally:
        if conn:
            await conn.close()

def get_system_menu_keyboard():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üî¢ –í–≤–µ—Å—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä")],
        [KeyboardButton(text="üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="üõí –ó–∞–∫–∞–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")],
        [KeyboardButton(text="üë©‚Äç‚öïÔ∏è –ú–æ–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥")],
        [KeyboardButton(text="‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ], resize_keyboard=True)

class UserStates(StatesGroup):
    waiting_for_reg_number = State()

@dp.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    user = message.from_user
    await add_user_to_db(user)
    
    welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—á—Ç–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É:
{FORM_URL}
–ù–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ 300"""
    
    await message.answer(welcome_text)
    
    await asyncio.sleep(5)
    
    await message.answer("–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ–º—É –±–æ—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä")
    await state.set_state(UserStates.waiting_for_reg_number)

@dp.message(UserStates.waiting_for_reg_number, lambda message: message.text not in ["‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", "üî¢ –í–≤–µ—Å—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä", "üõí –ó–∞–∫–∞–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", "üë©‚Äç‚öïÔ∏è –ú–æ–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥"])
async def process_reg_number(message: Message, state: FSMContext):
    try:
        reg_number = int(message.text.strip())
        user_id = message.from_user.id
        
        await update_user_reg(user_id, reg_number)
        await message.answer(f"–í–∞—à —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä {reg_number} –∑–∞–ø–∏—Å–∞–Ω", reply_markup=get_system_menu_keyboard())
        
        growth_text = """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–æ—Å—Ç–∞:

https://t.me/+WTmB9LAAHmpjZGJi
https://t.me/naturessunshine25
https://naturessunshine.ru/"""
        
        await message.answer(growth_text)
        await state.clear()
        
        
    except ValueError:
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ:\n{FORM_URL} \n –ù–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ 300\n\n–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).", reply_markup=get_system_menu_keyboard())

@dp.message(lambda message: message.text == "‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", UserStates.waiting_for_reg_number)
async def handle_support_during_reg(message: Message, state: FSMContext):
    support_text = """‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:
@admin_username

–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É: support@example.com
–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞: /start"""
    
    await message.answer(support_text)
    await message.answer("–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:")

@dp.message(lambda message: message.text == "üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", UserStates.waiting_for_reg_number)
async def handle_my_data_during_reg(message: Message):
    user_data = await get_user_data(message.from_user.id)
    
    if user_data:
        reg_number = user_data['reg'] if user_data['reg'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        sponsor_number = SPONSOR_NUMBER
        
        referral_link = f"https://nsp25.com/signup?sid={reg_number}" if reg_number != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä"
        
        data_text = f"""üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ

–ù–æ–º–µ—Ä —Å–ø–æ–Ω—Å–æ—Ä–∞: {sponsor_number}
–ú–æ–π —Ä–µ–≥ –Ω–æ–º–µ—Ä: {reg_number}
–í–∞—à–∞ –ª–∏—á–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}"""
    else:
        data_text = "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ."
    
    await message.answer(data_text)

@dp.callback_query(lambda c: c.data == "enter_reg_number")
async def process_enter_reg_number(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer(f"–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ:\n{FORM_URL}")
    
    await asyncio.sleep(5)
    
    await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ –∞–Ω–∫–µ—Ç–µ")
    await state.set_state(UserStates.waiting_for_reg_number)

@dp.callback_query(lambda c: c.data == "support")
async def process_support(callback_query: CallbackQuery):
    await callback_query.answer()
    support_text = """‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:
@admin_username

–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É: support@example.com"""
    
    await callback_query.message.answer(support_text)

@dp.callback_query(lambda c: c.data == "my_data")
async def process_my_data(callback_query: CallbackQuery):
    await callback_query.answer()
    
    user_data = await get_user_data(callback_query.from_user.id)
    
    if user_data:
        reg_number = user_data['reg'] if user_data['reg'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        sponsor_number = SPONSOR_NUMBER  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ –ø—Ä–æ—Å–∏–ª
        
        referral_link = f"https://nsp25.com/signup?sid={reg_number}" if reg_number != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä"
        
        data_text = f"""üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ

–ù–æ–º–µ—Ä —Å–ø–æ–Ω—Å–æ—Ä–∞: {sponsor_number}
–ú–æ–π —Ä–µ–≥ –Ω–æ–º–µ—Ä: {reg_number}
–í–∞—à–∞ –ª–∏—á–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}"""
    else:
        data_text = "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ."
    
    await callback_query.message.answer(data_text)

@dp.message(lambda message: message.text == "üî¢ –í–≤–µ—Å—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä", StateFilter(None))
async def handle_enter_reg_number(message: Message, state: FSMContext):
    await message.answer(f"–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ:\n{FORM_URL}")
    
    await asyncio.sleep(5)
    
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ –∞–Ω–∫–µ—Ç–µ")
    await state.set_state(UserStates.waiting_for_reg_number)

@dp.message(lambda message: message.text == "üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", StateFilter(None))
async def handle_my_data(message: Message):
    user_data = await get_user_data(message.from_user.id)
    
    if user_data:
        reg_number = user_data['reg'] if user_data['reg'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        sponsor_number = SPONSOR_NUMBER
        
        referral_link = f"https://nsp25.com/signup?sid={reg_number}" if reg_number != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä"
        
        data_text = f"""üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ

–ù–æ–º–µ—Ä —Å–ø–æ–Ω—Å–æ—Ä–∞: {sponsor_number}
–ú–æ–π —Ä–µ–≥ –Ω–æ–º–µ—Ä: {reg_number}
–í–∞—à–∞ –ª–∏—á–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}"""
    else:
        data_text = "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ."
    
    await message.answer(data_text)

@dp.message(lambda message: message.text == "‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", StateFilter(None))
async def handle_support(message: Message):
    support_text = """‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:
@admin_username

–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É: support@example.com"""
    
    await message.answer(support_text)

@dp.message(lambda message: message.text == "üõí –ó–∞–∫–∞–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", StateFilter(None))
async def handle_product_order(message: Message):
    order_text = f"""üõí –ó–∞–∫–∞–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤

https://nsp.com.ru/

–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –Ω–æ–º–µ—Ä —Å–ø–æ–Ω—Å–æ—Ä–∞ {SPONSOR_NUMBER}
–ß—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ–ø—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã"""
    
    await message.answer(order_text)

@dp.message(lambda message: message.text == "üõí –ó–∞–∫–∞–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", UserStates.waiting_for_reg_number)
async def handle_product_order_during_reg(message: Message):
    order_text = f"""üõí –ó–∞–∫–∞–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤

https://nsp.com.ru/

–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –Ω–æ–º–µ—Ä —Å–ø–æ–Ω—Å–æ—Ä–∞ {SPONSOR_NUMBER}
–ß—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ–ø—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã"""
    
    await message.answer(order_text)

@dp.message(lambda message: message.text == "üë©‚Äç‚öïÔ∏è –ú–æ–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥", StateFilter(None))
async def handle_nutritionist(message: Message):
    nutritionist_text = """üë©‚Äç‚öïÔ∏è –ú–æ–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥

–ò–º—è: –ù–∞–¥–µ–∂–¥–∞ –ê—Ä—Ç—é—Ö
–ú–æ–±–∏–ª—å–Ω—ã–π: +7 922 420-14-99

https://wa.me/79224201499"""
    
    await message.answer(nutritionist_text)

@dp.message(lambda message: message.text == "üë©‚Äç‚öïÔ∏è –ú–æ–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥", UserStates.waiting_for_reg_number)
async def handle_nutritionist_during_reg(message: Message):
    nutritionist_text = """üë©‚Äç‚öïÔ∏è –ú–æ–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥

–ò–º—è: –ù–∞–¥–µ–∂–¥–∞ –ê—Ä—Ç—é—Ö
–ú–æ–±–∏–ª—å–Ω—ã–π: +7 922 420-14-99

https://wa.me/79224201499"""
    
    await message.answer(nutritionist_text)

@dp.message(lambda message: message.text and message.text.lower() == "–∫–ª–∏–µ–Ω—Ç—ã")
async def handle_clients_command(message: Message):
    if message.from_user.id not in ADMIN_USER_IDS:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    users = await get_all_users()
    
    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    clients_text = "<b>–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>\n\n"
    
    for user in users:
        username = user['username'] if user['username'] else "–ù–µ—Ç username"
        reg = user['reg'] if user['reg'] else "–ù–µ—Ç –Ω–æ–º–µ—Ä–∞"
        clients_text += f"<b>@{username}</b> | <code>{reg}</code>\n"
    
    await message.answer(clients_text, parse_mode="HTML")

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())