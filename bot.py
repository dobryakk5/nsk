import asyncio
import logging
import os
import asyncpg
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
FORM_URL = "https://example.com/form"
DATABASE_URL = os.getenv('DATABASE_URL')

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

async def get_db_connection():
    return await asyncpg.connect(DATABASE_URL)

async def add_user_to_db(user: types.User):
    try:
        conn = await get_db_connection()
        await conn.execute('''
            INSERT INTO users (tg_user_id, username, first_name)
            VALUES ($1, $2, $3)
            ON CONFLICT (tg_user_id) DO NOTHING
        ''', user.id, user.username, user.first_name)
    except asyncpg.PostgresError as e:
        logging.error(f"Database error: {e}")
    finally:
        if conn:
            await conn.close()

async def update_user_reg(tg_user_id: int, reg_number: int):
    try:
        conn = await get_db_connection()
        await conn.execute('''
            UPDATE users SET reg = $1 WHERE tg_user_id = $2
        ''', reg_number, tg_user_id)
    except asyncpg.PostgresError as e:
        logging.error(f"Database error: {e}")
    finally:
        if conn:
            await conn.close()

async def get_user_data(tg_user_id: int):
    try:
        conn = await get_db_connection()
        user_data = await conn.fetchrow('''
            SELECT reg, first_name FROM users WHERE tg_user_id = $1
        ''', tg_user_id)
        return user_data
    except asyncpg.PostgresError as e:
        logging.error(f"Database error: {e}")
        return None
    finally:
        if conn:
            await conn.close()

class UserStates(StatesGroup):
    waiting_for_reg_number = State()

@dp.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    user = message.from_user
    await add_user_to_db(user)
    
    welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—á—Ç–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É:
{FORM_URL}"""
    
    await message.answer(welcome_text)
    
    await asyncio.sleep(5)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî¢ –í–≤–µ—Å—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä", callback_data="enter_reg_number")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="my_data")],
        [InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ])
    
    await message.answer("–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message(UserStates.waiting_for_reg_number)
async def process_reg_number(message: Message, state: FSMContext):
    try:
        reg_number = int(message.text.strip())
        user_id = message.from_user.id
        
        await update_user_reg(user_id, reg_number)
        await message.answer(f"–í–∞—à —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä {reg_number} –∑–∞–ø–∏—Å–∞–Ω")
        await state.clear()
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ - –≤–∞—à —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä.")

@dp.callback_query(lambda c: c.data == "enter_reg_number")
async def process_enter_reg_number(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer(f"–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ:\n{FORM_URL}")
    
    await asyncio.sleep(5)
    
    await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ –∞–Ω–∫–µ—Ç–µ")
    await state.set_state(UserStates.waiting_for_reg_number)

@dp.callback_query(lambda c: c.data == "support")
async def process_support(callback_query: CallbackQuery):
    await callback_query.answer()
    support_text = """üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:
@admin_username

–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É: support@example.com"""
    
    await callback_query.message.answer(support_text)

@dp.callback_query(lambda c: c.data == "my_data")
async def process_my_data(callback_query: CallbackQuery):
    await callback_query.answer()
    
    user_data = await get_user_data(callback_query.from_user.id)
    
    if user_data:
        reg_number = user_data['reg'] if user_data['reg'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        curator_reg = 2323  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ –ø—Ä–æ—Å–∏–ª
        
        data_text = f"""üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ

–†–µ–≥ –Ω–æ–º–µ—Ä –∫—É—Ä–∞—Ç–æ—Ä–∞: {curator_reg}
–ú–æ–π —Ä–µ–≥ –Ω–æ–º–µ—Ä: {reg_number}"""
    else:
        data_text = "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ."
    
    await callback_query.message.answer(data_text)

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())